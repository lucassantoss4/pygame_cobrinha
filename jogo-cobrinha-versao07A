# pygame_cobrinha
#Repositório do game

import pygame
from pygame.locals import *
from sys import exit 
from random import randint # sorteia valores em um determinado intervalo 


# inicia o jogo
pygame.init()

#criar musica de fundo
pygame.mixer.music.set_volume(0.15) # alterar o volume do fundo 
musica_de_fundo = pygame.mixer.music.load('BoxCat Games - CPU Talk.mp3')
pygame.mixer.music.play(-1 ) # tocar musica de fundo

# barulho da colisao
barulho_colisao = pygame.mixer.Sound('smw_coin.wav')
barulho_colisao.set_volume(0.3) # volume da colisao

#Descrição da tela
largura = 640
altura = 480

# Variaveis display 
x_cobra = int(largura/2) # posicao do retangulo
y_cobra = int(altura/2)

velocidade = 10
x_controle =velocidade
y_controle = 0


# Intervalo de tempo do retangulo azul com a função randint
x_maca = randint (40, 600) # posição em X
y_maca = randint (50, 430) # posição Y

# contador de pontos
pontos = 0
# texto: (parametro(arial), tamanho, negrito(True ou False), italico(True ou False))
fonte =pygame.font.SysFont('arial', 40, bold=True, italic=True)
# pygame.font.get_fonts() comando para ver as fontes disponiveis

tela_game = pygame.display.set_mode((largura, altura))

# nome do jogo
pygame.display.set_caption('Jogo da cobrinha')


# taxa de frems do retangulo 
relogio = pygame.time.Clock()

lista_cobra = []

# Limites para o tamanho 
comprimento_inicial = 5

# função que desenha o corpo da cobra 

def aumenta_cobra (lista_cobra):
    for XeY in lista_cobra : # XeY = [X,Y]
        pygame.draw.rect(tela_game, (0 , 255, 0), (XeY[0], XeY [1], 20 , 20))



# lupi do jogo
while True:
    relogio.tick(18) # quanto maior o numero de frems mais rapido o retangulo vaiu rodar
    tela_game.fill((255,255,255)) #preenche com a cor da tela
    mensagem = f'PONTOS: {pontos}' # o que vai aparecer  na tela game
    texto_formatado = fonte.render(mensagem, True, (0,0,0))
    for event in pygame.event.get():
        if event.type == QUIT:
            pygame .quit()
            exit ()


        # condicao 
        # cobra altomatica
        if event.type == KEYDOWN:
            if event.key == K_a :
                if x_controle == velocidade:
                    pass
                else:
                    x_controle = -velocidade
                    y_controle = 0
            if event.key == K_d:
                if x_controle == -velocidade:
                    pass
                else:
                    x_controle = velocidade
                    y_controle = 0
            if event.key == K_w:
                if y_controle == velocidade:
                    pass
                else:
                    y_controle = -velocidade
                    x_controle = 0
            if event.key == K_s:
                if y_controle == -velocidade:
                    pass
                else:
                    y_controle = velocidade
                    x_controle = 0

    x_cobra = x_cobra + x_controle
    y_cobra = y_cobra + y_controle



    # desenha retangulo: ((parametro),(cor do retangulo),{(posicao(x,y)),(combrimento(largura em pix))(altura em pix)}
    # pygame.draw.rect(tela_game,(0,255,0),(200,300,40,50)) # (200,300,40,50) é {(posicao(x,y)),(combrimento(largura em pix))(altura em pix)}
    # pygame.display.update() # a cada iteração do jogador , atualiza a tela 
    cobra = pygame.draw.rect(tela_game, (0,255,0), (x_cobra, y_cobra , 20 , 20)) # (200,300,40,50) é {(posicao(x,y)),(combrimento(largura em pix))(altura em pix)}
    maca= pygame.draw.rect(tela_game, (255,0,0), (x_maca, y_maca ,20, 20)) # quadrado azul

# caso o retangulo vermelho (ret_vermelho) encoste no azul COLISÃO
    if cobra.colliderect(maca):
        x_maca = randint (40, 600)
        y_maca = randint (50, 430)
        pontos +=10
        barulho_colisao.play()
        comprimento_inicial +=1 # adiciona um no tamanho 
    #  adicionar tamanho para a cobra
    lista_cabeca = []
    lista_cabeca.append(x_cobra)
    lista_cabeca.append(y_cobra)
    lista_cobra.append(lista_cabeca)

    if len (lista_cobra) > comprimento_inicial:
        del lista_cobra[0]




    aumenta_cobra (lista_cobra)


    # apresenta o texto na tela (parametro,(posicao(x,y))
    tela_game.blit(texto_formatado,(000,000))
    #print ('colidiu') subistituido por X ,Y

    pygame.display.update()
